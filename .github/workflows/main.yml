name: Deploy to Server

env:
  DEPLOY_PATH: /home/${{ secrets.SERVER_USER }}/apps/shortify

on:
  push:
    branches:
      - main
jobs:
  fmt-vet:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Set Up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23

    - name: Clean Go Cache
      run: go clean -cache -modcache -testcache -x

    - name: Install Dependencies
      run: go mod tidy

    - name: Format Go Code
      run: go fmt $(go list ./... | grep -v /vendor/)

    - name: Run Go Vet
      run: go vet $(go list ./... | grep -v /vendor/)

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: fmt-vet
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Configure SSH Key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add Remote Server to Known Hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Copy Files to Server
      run: |
        rsync -avz --exclude '.git' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_PATH }}

    - name: Deploy with Docker Compose
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          cd /home/${{ secrets.SERVER_USER }}/app
          sudo docker compose down
          sudo docker system prune -a -f --volumes
          sudo docker compose up -d --build
        EOF
  
  tag:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [fmt-vet,deploy]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Get Last Tag and Increment
      run: |
        # Check if there are tags in the repository
        if git rev-list --tags --max-count=1 | grep -q .; then
            # Get the last tag and increment
            LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        else
            # If no tags, set the initial tag to v0.0.0
            LAST_TAG="v0.0.0"
        fi

        echo "Last tag: $LAST_TAG"

        # Extract version from the tag
        VERSION=$(echo $LAST_TAG | sed 's/^v//')
        IFS='.' read -r -a VERSION_ARRAY <<< "$VERSION"

        # Increment the last number (patch version)
        PATCH=${VERSION_ARRAY[2]}
        PATCH=$((PATCH + 1))

        # Create the new tag
        NEW_TAG="v${VERSION_ARRAY[0]}.${VERSION_ARRAY[1]}.$PATCH"

        # Check if the tag already exists
        if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Incrementing patch version again."
            PATCH=$((PATCH + 1))  # Increment the patch again if the tag already exists
            NEW_TAG="v${VERSION_ARRAY[0]}.${VERSION_ARRAY[1]}.$PATCH"
        fi

        # Create the new tag and push to the repository
        git tag $NEW_TAG
        git push origin $NEW_TAG

        echo "New tag $NEW_TAG created and pushed."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}